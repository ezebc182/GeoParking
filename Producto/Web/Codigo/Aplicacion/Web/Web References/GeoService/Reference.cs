//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.34014
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.34014.
// 
#pragma warning disable 1591

namespace Web.GeoService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Service1Soap", Namespace="http://tempuri.org/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ObtenerPlayasDeCiudadOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObtenerPlayasDeCiudadPorFiltroOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service1() {
            this.Url = global::Web.Properties.Settings.Default.Web_GeoService_Service1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ObtenerPlayasDeCiudadCompletedEventHandler ObtenerPlayasDeCiudadCompleted;
        
        /// <remarks/>
        public event ObtenerPlayasDeCiudadPorFiltroCompletedEventHandler ObtenerPlayasDeCiudadPorFiltroCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtenerPlayasDeCiudad", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ObtenerPlayasDeCiudad(string ciudad) {
            object[] results = this.Invoke("ObtenerPlayasDeCiudad", new object[] {
                        ciudad});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ObtenerPlayasDeCiudadAsync(string ciudad) {
            this.ObtenerPlayasDeCiudadAsync(ciudad, null);
        }
        
        /// <remarks/>
        public void ObtenerPlayasDeCiudadAsync(string ciudad, object userState) {
            if ((this.ObtenerPlayasDeCiudadOperationCompleted == null)) {
                this.ObtenerPlayasDeCiudadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObtenerPlayasDeCiudadOperationCompleted);
            }
            this.InvokeAsync("ObtenerPlayasDeCiudad", new object[] {
                        ciudad}, this.ObtenerPlayasDeCiudadOperationCompleted, userState);
        }
        
        private void OnObtenerPlayasDeCiudadOperationCompleted(object arg) {
            if ((this.ObtenerPlayasDeCiudadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObtenerPlayasDeCiudadCompleted(this, new ObtenerPlayasDeCiudadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtenerPlayasDeCiudadPorFiltro", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ObtenerPlayasDeCiudadPorFiltro(string ciudad, int tipoPlaya, int tipoVehiculo, int diaAtencion, string precioDesde, string precioHasta, int horaDesde, int horaHasta) {
            object[] results = this.Invoke("ObtenerPlayasDeCiudadPorFiltro", new object[] {
                        ciudad,
                        tipoPlaya,
                        tipoVehiculo,
                        diaAtencion,
                        precioDesde,
                        precioHasta,
                        horaDesde,
                        horaHasta});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ObtenerPlayasDeCiudadPorFiltroAsync(string ciudad, int tipoPlaya, int tipoVehiculo, int diaAtencion, string precioDesde, string precioHasta, int horaDesde, int horaHasta) {
            this.ObtenerPlayasDeCiudadPorFiltroAsync(ciudad, tipoPlaya, tipoVehiculo, diaAtencion, precioDesde, precioHasta, horaDesde, horaHasta, null);
        }
        
        /// <remarks/>
        public void ObtenerPlayasDeCiudadPorFiltroAsync(string ciudad, int tipoPlaya, int tipoVehiculo, int diaAtencion, string precioDesde, string precioHasta, int horaDesde, int horaHasta, object userState) {
            if ((this.ObtenerPlayasDeCiudadPorFiltroOperationCompleted == null)) {
                this.ObtenerPlayasDeCiudadPorFiltroOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObtenerPlayasDeCiudadPorFiltroOperationCompleted);
            }
            this.InvokeAsync("ObtenerPlayasDeCiudadPorFiltro", new object[] {
                        ciudad,
                        tipoPlaya,
                        tipoVehiculo,
                        diaAtencion,
                        precioDesde,
                        precioHasta,
                        horaDesde,
                        horaHasta}, this.ObtenerPlayasDeCiudadPorFiltroOperationCompleted, userState);
        }
        
        private void OnObtenerPlayasDeCiudadPorFiltroOperationCompleted(object arg) {
            if ((this.ObtenerPlayasDeCiudadPorFiltroCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObtenerPlayasDeCiudadPorFiltroCompleted(this, new ObtenerPlayasDeCiudadPorFiltroCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ObtenerPlayasDeCiudadCompletedEventHandler(object sender, ObtenerPlayasDeCiudadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObtenerPlayasDeCiudadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObtenerPlayasDeCiudadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ObtenerPlayasDeCiudadPorFiltroCompletedEventHandler(object sender, ObtenerPlayasDeCiudadPorFiltroCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObtenerPlayasDeCiudadPorFiltroCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObtenerPlayasDeCiudadPorFiltroCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591